// Environment loader for client-side applications
// This script should be generated by a build process that reads .env files

(function () {
  "use strict";

  // Environment configuration
  // In production, these values should be injected by your build process
  // and the API key should be properly secured
  function loadEnvironment() {
    // Check if we're in a development environment
    const isDev =
      window.location.hostname === "localhost" ||
      window.location.hostname === "127.0.0.1" ||
      window.location.protocol === "file:";

    let envVars = {
      NODE_ENV: isDev ? "development" : "production",
      DEBUG_MODE: isDev ? "true" : "false",
    };

    // For development, you can set this directly
    // In production, this should come from your deployment environment
    if (isDev) {
      // Load from local environment or prompt user
      const apiKey =
        localStorage.getItem("GOOGLE_AI_API_KEY") ||
        prompt("Please enter your Google AI API Key:") ||
        "";

      if (apiKey) {
        localStorage.setItem("GOOGLE_AI_API_KEY", apiKey);
        envVars.GOOGLE_AI_API_KEY = apiKey;
      }
    } else {
      // In production, this should be injected by your build process
      // Never hardcode API keys in production code
      envVars.GOOGLE_AI_API_KEY = process.env.GOOGLE_AI_API_KEY || "";
    }

    // Make environment variables available
    window.ENV = envVars;

    // Compatibility with Node.js-style process.env
    if (typeof window.process === "undefined") {
      window.process = { env: envVars };
    } else {
      window.process.env = { ...window.process.env, ...envVars };
    }

    console.log("ðŸ”§ Environment loaded:", isDev ? "development" : "production");

    return envVars;
  }

  // Initialize environment
  loadEnvironment();
})();
